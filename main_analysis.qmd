---
title: "My document"
bibliography: references.bib
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

# Drought impact profiles research


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(factoextra)
library(ggrepel)
library(patchwork)
library(RColorBrewer)
library(tmap)
library(gt)
library(aweSOM)
library(ggalluvial)
library(ggfittext)
library(readr)
library(biscale)
library(readxl)
library(GGally)
library(tidyverse)
load("data/nuts_geo_layers.RData")
nuts1 <- nuts_geo_data %>% 
  dplyr::filter(LEVL_CODE == 1) %>% 
  dplyr::filter(CNTR_CODE == "DE")
nuts2 <- nuts_geo_data %>% 
  dplyr::filter(LEVL_CODE == 2) %>% 
  dplyr::filter(CNTR_CODE == "DE")
nuts3 <- nuts_geo_data %>% 
  dplyr::filter(LEVL_CODE == 3) %>% 
  dplyr::filter(CNTR_CODE == "DE")
```






## Data

### Impact data


```{r, warning=FALSE, message=FALSE}
load("impacts_dataset_export_validation.RData")
impacts_dataset <- impacts_dataset %>% 
  drop_na(type_of_class) %>% 
  dplyr::filter(type_of_class != "energy")

total_annual_impact_data <- impacts_dataset %>% 
  drop_na(type_of_class) %>% 
  group_by(nuts_id, statistical_unit, year_date, type_of_class) %>% 
  summarise(MIS = sum(MIS, na.rm = TRUE)) %>% 
  tidyr::pivot_wider(names_from = type_of_class, values_from = MIS) %>% 
  replace(is.na(.), 0) %>% 
    dplyr::filter(statistical_unit  == "nuts3")





```



```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=15, fig.cap='Figure ...: Spatial distribution of drought impact types'}
visualize_impacts_across <- impacts_dataset %>% 
  dplyr::filter(statistical_unit  == "nuts3") %>% 
  group_by(type_of_class, nuts_id) %>% 
  summarise(MIS = sum(MIS, na.rm = TRUE)) %>% 
  dplyr::right_join(nuts3, 
                   by = c("nuts_id"="NUTS_ID")) %>% 
  sf::st_as_sf()

map_data <- expand.grid(type_of_class = unique(impacts_dataset$type_of_class),
            nuts_id = unique(nuts3$NUTS_ID)) %>% 
            dplyr::left_join(visualize_impacts_across, 
                             by = c("nuts_id" = "nuts_id",
                                    "type_of_class" = "type_of_class")) %>% 
  mutate(MIS = ifelse(is.na(MIS), 0, MIS)) %>% 
  group_by(type_of_class) %>% 
  mutate(MIS = scales::rescale(MIS)) %>% 
  sf::st_as_sf()


spatial_map <-  ggplot(map_data) + 
    geom_sf(aes(fill=(MIS)), color = NA)+
    facet_wrap(~type_of_class,
               nrow = 1)+
    scale_fill_distiller(palette = "YlOrRd", direction = 1)+
    geom_sf(fill = "transparent", color = "gray20", size = .2, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())+
    theme_minimal()+
    theme(axis.title = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank(),
          panel.grid = element_blank(),
          
          panel.spacing = unit(5, "lines"),
          strip.text = element_text(size = 30, face = "bold"),
          legend.title = element_text(size = 30),
          legend.text = element_text(size = 30),
          legend.key.size = unit(2, "cm"),
          legend.position = c(0.5,1.4),
          legend.direction = "horizontal")+
    labs(fill = "Relative distribution of DIS")
 
 





temporal <- impacts_dataset %>% 
 group_by(year_date, type_of_class) %>% 
 summarise(n = sum(MIS, na.rm = TRUE)) %>%
  ggplot(aes(x = year_date, y = n))+
  geom_line()+
  geom_point()+
  scale_x_continuous(breaks = c(2000,2010,2020), labels = c(2000,2010,2020))+
  facet_wrap(~type_of_class, nrow = 1)+
  theme_void()+
  labs(y = "DIS")+
  theme(panel.border = element_rect(color = "black",
                                    fill = NA,
                                    size = 1),
        panel.spacing = unit(5, "lines"),
        strip.text = element_blank(),
        axis.text.x = element_text(size = 24, face = "bold"),
        axis.title.y = element_text(size = 24, face = "bold"))



spatial_map + inset_element(temporal, 0,0,1,.2)

```


### Data transformation

```{r}
#step 1: remove all observations w/o impact and years not relevant


to_keep <- expand.grid(nuts_id = nuts3$NUTS_ID,
            year_date = seq(2000,2020,1)) %>% 
  dplyr::left_join(total_annual_impact_data %>% 
  ungroup() %>% 
  mutate(across(agriculture:livestock, 
                ~ as.numeric(.x))) %>% 
  tidyr::pivot_longer(!c(nuts_id, statistical_unit, year_date),
                      names_to = "impact_class",
                      values_to = "MIS") %>% 
  group_by(nuts_id, year_date) %>% 
  summarise(MIS = sum(MIS, na.rm = TRUE)),
  by = c("nuts_id" = "nuts_id", "year_date" = "year_date")) %>% 
  mutate(MIS = ifelse(is.na(MIS),0,MIS)) %>% 
  dplyr::filter(MIS > 0) %>% 
  ungroup()

total_annual_impact_data_transformed <- total_annual_impact_data %>% 
  dplyr::semi_join(to_keep, 
                   by = c("nuts_id" = "nuts_id", 
                          "year_date" = "year_date")) %>% 
  ungroup()



total_annual_impact_data_transformed <- total_annual_impact_data_transformed %>% 
  dplyr::filter(year_date %in% c(2018, 2019,2020,2003, 2015))


total_annual_impact_data_transformed <- total_annual_impact_data_transformed %>% 
   mutate(across(agriculture:livestock, 
                ~ scales::rescale(.x)))





#re-scale w/ respect to annual max and min
 total_annual_impact_data_transformed <- total_annual_impact_data_transformed %>% 
   tidyr::pivot_longer(!c(nuts_id, statistical_unit, year_date),
                       values_to = "MIS",
                       names_to = "impact_class") %>% 
   group_by(year_date, nuts_id) %>%  #important part!!
   #mutate(MIS = scales::rescale(MIS)) %>% 
   mutate(MIS = rank(MIS)) %>% 
   ungroup() %>% 
   tidyr::pivot_wider(c(nuts_id, statistical_unit, year_date),
                      names_from = "impact_class", 
                      values_from = "MIS")



#select years for dim-red
total_annual_impact_data_transformed <- total_annual_impact_data_transformed #%>% 
  # mutate(across(agriculture:livestock, 
   #             ~ scales::rescale(rank(.x))))




write.csv(total_annual_impact_data_transformed, "experiment_awesom_app.csv")


```






## Results

### PCA


```{r, fig.width=10, fig.height=4}

res.pca <- prcomp(
  total_annual_impact_data_transformed %>% 
  ungroup() %>% 
 
    dplyr::select(agriculture:livestock))

p1 <- fviz_pca_biplot(res.pca, 
 alpha.ind = .2,
                labelsize = 7,
                arrowsize = 1,
                col.var = "red",                label = "var",
                             repel = TRUE,     # Avoid text overlapping,

               ggtheme = theme_minimal())+
  labs(title = "B")+
   theme(
     title = element_text(),
       axis.title = element_text(size = 20),
        axis.text = element_text(size = 18),
     panel.grid = element_blank(),
     panel.border = element_rect(colour = "black", fill=NA, size=1))

p2 <- fviz_pca_biplot(res.pca, 
                 alpha.ind = .2,
                labelsize = 7,
                arrowsize = 1,
                col.var = "red",
                 axes = c(1,3),
                label = "var",
                repel = TRUE,     # Avoid text overlapping,

               ggtheme = theme_minimal())+
  labs(title = "C")+
   theme(
     title = element_text(),
       axis.title = element_text(size = 20),
        axis.text = element_text(size = 18),
     panel.grid = element_blank(),
     panel.border = element_rect(colour = "black", fill=NA, size=1))

var <- get_pca_var(res.pca)
cors <- var$cos2
colnames(cors) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6",
                    "PC7")
p3 <- ggcorrplot::ggcorrplot(t(cors), method = "circle")+
  scale_fill_distiller(palette = "YlOrRd", direction = 1, limits = c(0,1))+
  labs(fill = "Spearman's Rho", title = "A")+
  theme(title = element_text(hjust = 0),
        legend.position = "bottom",
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 18, hjust = -1),
        legend.key.width= unit(1, 'cm'),
        axis.text.x  = element_text(size = 18),
        axis.text.y = element_text(size = 18)
        )



p3 <- summary(res.pca)$importance[2,] %>% as_tibble() %>% 
  rowid_to_column(var = "dimension") %>% 
  dplyr::filter(dimension != 7) %>% 
  ggplot(aes(x = dimension, y = value, label = round(value,2)))+
  geom_point(size = 4)+
  geom_text(nudge_y= .01, size = 6)+
  geom_line(linetype = "dashed")+
  theme_minimal()+
   theme(
     panel.grid = element_blank(),
     axis.title = element_text(size  = 20),
     axis.text = element_text(size = 18),
     panel.border = element_rect(colour = "black", fill=NA, size=1)
        )+
    labs(title = "A", x = "Dimension", y = "Explained variance [%]")+
  scale_x_continuous(breaks = c(1,2,3,4,5,6,7))

library(patchwork)
p3 + p1 + p2 

```






```{r}


data_plot <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble()

pc_1 <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  drop_na(nuts_id) %>% 
  tidyr::pivot_longer(!c(nuts_id, year_date),
                      names_to = "dimension", values_to = "coeff") %>% 
  dplyr::mutate(year_date = as_factor(year_date),
                nuts_id = as_factor(nuts_id)) %>% 
  dplyr::filter(dimension %in% c("PC1")) %>% 
  dplyr::left_join(nuts_geo_data, by = c("nuts_id" = "NUTS_ID")) %>% 
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(aes(fill = coeff), color = NA)+
     #ggsci::scale_fill_gsea(reverse = TRUE)+
  scale_fill_gradient2(breaks = c(-2.5,2.5), labels = c("Agriculture,Livestock", 
                                                        "Forestry, Social"))+
  facet_wrap(~year_date, nrow = 1)+
  theme_void()+
  theme(legend.position = "left",
        strip.text.y = element_text(hjust = 20),
        legend.key.height = unit(.4, 'cm'))+
  labs(fill = "PC1")+
  
   geom_sf(fill = "transparent", color = "gray20", size = .2, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())



pc_2 <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  drop_na(nuts_id) %>% 
  tidyr::pivot_longer(!c(nuts_id, year_date),
                      names_to = "dimension", values_to = "coeff") %>% 
  dplyr::mutate(year_date = as_factor(year_date),
                nuts_id = as_factor(nuts_id)) %>% 
  dplyr::filter(dimension %in% c("PC2")) %>% 
  dplyr::left_join(nuts_geo_data, by = c("nuts_id" = "NUTS_ID")) %>% 
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(aes(fill = coeff), color = NA)+
     #ggsci::scale_fill_gsea(reverse = TRUE)+
  scale_fill_gradient2(breaks = c(-2.5,2.5), labels = c("Forestry, aquaculture,\n waterways", 
                                                        "Fire"),
                        low="orange", high="purple")+
  facet_wrap(~year_date, nrow = 1)+
  theme_void()+
  theme(legend.position = "left",
        strip.text.y = element_text(hjust = 20),
        legend.key.height = unit(.4, 'cm'))+
  labs(fill = "PC2")+
  
   geom_sf(fill = "transparent", color = "gray20", size = .2, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())



pc_3 <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  drop_na(nuts_id) %>% 
  tidyr::pivot_longer(!c(nuts_id, year_date),
                      names_to = "dimension", values_to = "coeff") %>% 
  dplyr::mutate(year_date = as_factor(year_date),
                nuts_id = as_factor(nuts_id)) %>% 
  dplyr::filter(dimension %in% c("PC3")) %>% 
  dplyr::left_join(nuts_geo_data, by = c("nuts_id" = "NUTS_ID")) %>% 
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(aes(fill = coeff), color = NA)+
     #ggsci::scale_fill_gsea(reverse = TRUE)+
  scale_fill_gradient2(breaks = c(-2.5,2.5), labels = c("Forestry", 
                                                        "Aquaculture"),
                      
                       low="red", high="blue")+
  facet_wrap(~year_date, nrow = 1)+
  theme_void()+
  theme(legend.position = c(-.25,.5),
        strip.text.y = element_text(hjust = 20),
        legend.key.height = unit(.4, 'cm'))+
  labs(fill = "PC3")+
  
   geom_sf(fill = "transparent", color = "gray20", size = .2, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())


library(patchwork)

pc_1 / pc_2 / pc_3

```



```{r}
res.pca$rotation %>% 
  as_tibble() %>% 
  dplyr::bind_cols(tibble(impact_class = c("agriculture", "forestry", "social",
                               "waterways", "aquaculture", "fire",
                               "livestock"))) %>% 
  tidyr::pivot_longer(!impact_class, names_to = "PC", values_to = "coefficient") %>% 
  ggplot(aes(x = PC, y = impact_class, fill = coefficient))+
  geom_tile()+
  scale_fill_continuous(limits = c(-1,1), breaks = c(-1,0,1), labels = c(-1,0,1))+
  ggsci::scale_fill_gsea(reverse = TRUE,
                         limits = c(-1,1), breaks = c(-1,0,1), labels = c(-1,0,1))+
  coord_equal()+
  theme_minimal()+
  theme(axis.ticks = element_blank(),
        panel.grid = element_blank())+
  labs(y = "Impact variables", "Principal Components", fill = "Loading")
 
```

```{r}
#mariana std idea

data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  drop_na(nuts_id) %>% 
  tidyr::pivot_longer(!c(nuts_id, year_date),
                      names_to = "dimension", values_to = "coeff") %>% 
  dplyr::mutate(year_date = as_factor(year_date),
                nuts_id = as_factor(nuts_id)) %>% 
  dplyr::filter(dimension %in% c("PC1","PC2", "PC3")) %>% 
  group_by(nuts_id, dimension) %>% 
  summarise(sd_pc = sd(coeff)) %>% 
   dplyr::left_join(nuts_geo_data, by = c("nuts_id" = "NUTS_ID")) %>% 
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(aes(fill = sd_pc), color = NA)+
  theme_void()+
  scale_fill_gradient(low = "white", high = "black")+
  facet_wrap(~dimension)+
  labs(fill = "SD")

```



```{r}

lahn_kreis <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  dplyr::filter(nuts_id == "DE722")
  




rendsburg <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  dplyr::filter(nuts_id == "DEF0B")


spatial_orientation <- 
nuts3 %>% 
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(fill = "white", size = .2)+
  theme_void()+
  theme(panel.border = element_rect(color = "black", size = .2, fill = NA))+
  geom_sf(data= nuts3 %>% dplyr::filter(NUTS_ID == "DEF0B") %>% sf::st_centroid(), 
          color = "cyan", size = 3)+
 
  geom_sf(data= nuts3 %>% dplyr::filter(NUTS_ID == "DE722") %>% sf::st_centroid(),
          color = "green", size = 3)
  

p1 <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  ggplot(aes(x = PC1, y = PC2))+
  geom_point(color = "grey")+
  theme_minimal()+
  coord_equal()+
 
  #label bottom-left
 
  geom_path(data = lahn_kreis, aes(x = PC1, y = PC2), color = "green",
            size = 1.2,
            arrow = arrow(length = unit(0.2, "cm")))+
  geom_text(data = lahn_kreis %>% arrange(year_date), 
             aes(x = PC1, y = PC2, label = year_date), size = 2)+
  #DEF0B 
  geom_path(data = rendsburg, aes(x = PC1, y = PC2), color = "cyan",
            size = 1.2,
            arrow = arrow(length = unit(0.2, "cm")))+
  geom_text(data = rendsburg %>% arrange(year_date), 
             aes(x = PC1, y = PC2, label = year_date), size = 2)



p2 <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  ggplot(aes(x = PC1, y = PC3))+
  geom_point(color = "grey")+
  theme_minimal()+
  coord_equal()+
  
  #label bottom-left
 
  geom_path(data = lahn_kreis, aes(x = PC1, y = PC3), color = "green",
            size = 1.2,
            arrow = arrow(length = unit(0.2, "cm")))+
  geom_text(data = lahn_kreis %>% arrange(year_date), 
             aes(x = PC1, y = PC3, label = year_date), size = 2)+
  #DEF0B 
  geom_path(data = rendsburg, aes(x = PC1, y = PC3), color = "cyan",
            size = 1.2,
            arrow = arrow(length = unit(0.2, "cm")))+
  geom_text(data = rendsburg %>% arrange(year_date), 
             aes(x = PC1, y = PC3, label = year_date), size = 2)


p1 + p2 + inset_element(spatial_orientation, left = -.7, bottom = .8,
                        right = .1, top = 1.2,
                        on_top = TRUE)



```



```{r}
#co-ranking matrix
co_ranking <- res.pca$x %>% 
  as_tibble() %>% 

  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble()

Q.pca <- coranking(co_ranking %>% dplyr::select(agriculture:livestock), co_ranking %>% dplyr::select(PC1:PC3))


imageplot(Q.pca, main = "PCA")
```






```{r}
library(plotly)


data_plotly <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble()


fig <- plot_ly(data_plotly, x = ~PC1, y = ~PC2, z = ~PC3, color = ~as_factor(year_date))

fig <- fig %>% add_markers(size = 1)

fig <- fig %>% layout(scene = list(xaxis = list(title = 'PC1'),

                     yaxis = list(title = 'PC2'),

                     zaxis = list(title = 'PC3')))


fig
```



```{r}

macro_regions <- tibble(nuts_id = c("DE7", "DE1", "DE2",
                                    "DEE", "DEG", "DED", "DE4", "DE8",
                                    "DEB", "DEA", "DE9", "DEF"),
                        macro_region = c("south-west", "south-west", "south-west",
                                         "east", "east", "east", "east", "east",
                                         "northwest", "northwest", "northwest",
                                         "northwest"))


data_plot <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble()


data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-2)) %>%
  dplyr::left_join(macro_regions, by = c("nuts_id" = "nuts_id")) %>% 
  mutate(nuts_id = macro_region) %>% 
  dplyr::select(!macro_region) %>%
  drop_na(nuts_id) %>% 
  tidyr::pivot_longer(!c(nuts_id, year_date),
                      names_to = "dimension", values_to = "coeff") %>% 
  dplyr::mutate(year_date = as_factor(year_date),
                nuts_id = as_factor(nuts_id)) %>% 
  tidyr::pivot_longer(!c(coeff, dimension),
                      names_to = "distinction",
                      values_to = "category") %>% 
  dplyr::filter(dimension %in% c("PC1", "PC2", "PC3")) %>% 
  dplyr::mutate(distinction = ifelse(distinction == "nuts_id",
                                     "Region",
                                     "Year")) %>% 
  ggplot(aes(x = category, y = coeff))+
    ggdist::stat_halfeye(
    adjust = .5, 
    width = .6, 
    .width = 0, 
    justification = -.2, 
    point_colour = NA
  ) + 
  geom_boxplot(
    width = .15, 
    outlier.shape = NA
  )+ 
    facet_grid(rows = vars(dimension),
               cols = vars(distinction),
               scales = "free")+
  labs(y = "Value of PC", x = "")+
  theme_minimal()+
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))





data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-2)) %>%
  dplyr::left_join(macro_regions, by = c("nuts_id" = "nuts_id")) %>% 
  mutate(nuts_id = macro_region) %>% 
  dplyr::select(!macro_region) %>%
  drop_na(nuts_id) %>% 
  tidyr::pivot_longer(!c(nuts_id, year_date),
                      names_to = "dimension", values_to = "coeff") %>% 
  dplyr::mutate(year_date = as_factor(year_date),
                nuts_id = as_factor(nuts_id)) %>% 
  dplyr::filter(dimension %in% c("PC1", "PC2", "PC3")) %>%
   ggplot(aes(x = dimension, y = coeff))+
    ggdist::stat_halfeye(
    adjust = .5, 
    width = .6, 
    .width = 0, 
    justification = -.2, 
    point_colour = NA
  ) + 
  geom_boxplot(
    width = .15, 
    outlier.shape = NA
  )+ 
    facet_grid(rows = vars(year_date),
               cols = vars(nuts_id),
               scales = "fixed")+
  labs(y = "value of PC", x = "")+
  theme_minimal()
  
  

```












```{r}


intersections_sf_areas_1 <- read_csv("../impact_predictions/data/intersections_sf_areas_2.csv")
intersections_sf_areas_2 <- read_csv("../impact_predictions/data/intersections_sf_areas_3.csv")
intersections_sf_areas_3 <- read_csv("../impact_predictions/data/intersections_sf_areas_4.csv")
intersections_sf_areas_4 <- read_csv("../impact_predictions/data/intersections_sf_areas_5.csv")
intersections_sf_areas_5 <- read_csv("../impact_predictions/data/intersections_sf_areas_1.csv")



land_use <- dplyr::bind_rows(intersections_sf_areas_1,
                             intersections_sf_areas_2,
                             intersections_sf_areas_3,
                             intersections_sf_areas_4,
                             intersections_sf_areas_5) %>% 
  dplyr::select(NUTS_ID, area_total, description) %>% 
  tidyr::pivot_wider(NUTS_ID, names_from = "description", values_from = "area_total") %>% 
  dplyr::select("Non-irrigated arable land", "Pastures, meadows and other permanent grasslands under agricultural use",
                "Broad-leaved forest", "Coniferous forest", "Mixed forest",
                "Water bodies",
                NUTS_ID) 

land_use[is.na(land_use)] <- 0

land_use %>% 
  tidyr::pivot_longer(!NUTS_ID, names_to = "land_cover", values_to = "area") %>% 
  ggplot(aes(x = area))+
  geom_histogram()+
    facet_wrap(~land_cover, scales = "free")+
  theme(axis.text.x = element_text(angle = 90))



total_area <- land_use %>% 
  tidyr::pivot_longer(!NUTS_ID, names_to = "land_cover", values_to = "area") %>% 
  group_by(NUTS_ID) %>% 
  summarise(total_area = sum(area, na.rm = TRUE))


land_use <- land_use %>% 
  dplyr::left_join(total_area, by = c("NUTS_ID"="NUTS_ID")) %>% 
  tidyr::pivot_longer(!c(NUTS_ID, total_area), names_to = "land_type", values_to = "area") %>% 
   mutate(
    land_type = case_when(
      land_type == "Non-irrigated arable land" ~ "agricultural land",
      land_type == "Pastures, meadows and other permanent grasslands under agricultural use" ~ "agricultural land",
       land_type == "Broad-leaved forest" ~ "forest",
       land_type == "Coniferous forest" ~ "forest",
       land_type == "Mixed forest" ~ "forest",
      
    )
  ) %>% 
  group_by(NUTS_ID, land_type) %>% 
  summarise(area = sum(area, na.rm = TRUE),
            total_area = mean(total_area, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(relative_area  = area / total_area) %>% 
  dplyr::select(relative_area, NUTS_ID, land_type) %>% 
  tidyr::pivot_wider(NUTS_ID, names_from = land_type, values_from = relative_area)





#correlations for individual years --> 2018
lm_model_data <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::filter(year_date == 2018) %>% 
  dplyr::select(!statistical_unit) %>% 
  #dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-1)) %>%
  dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>% 
  dplyr::select(PC1:PC3, 
                `agricultural land`:forest) 
cors <- cor(lm_model_data, method = "spearman") 
cors <- cors[c("PC1", "PC2", "PC3"), ]
p.mat <- ggcorrplot::cor_pmat(lm_model_data)

p.mat <- p.mat[c("PC1", "PC2", "PC3"), ]



  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 2, p.mat = p.mat)+
theme_void()+
 theme(
        axis.text = element_text(size = 8,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        axis.text.x = element_text(size = 8,
                                 angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right")+
    labs(title = "Correlations PCs with land-use for 2018")
  
  
  #correlations for individual years --> 2003
lm_model_data <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::filter(year_date == 2003) %>% 
  dplyr::select(!statistical_unit) %>% 
  #dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-1)) %>%
  dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>% 
  dplyr::select(PC1:PC3, 
                `agricultural land`:forest) 
cors <- cor(lm_model_data, method = "spearman") 
cors <- cors[c("PC1", "PC2", "PC3"), ]
cors <- cors[c("PC1", "PC2", "PC3"), ]
p.mat <- ggcorrplot::cor_pmat(lm_model_data)
p.mat <- p.mat[c("PC1", "PC2", "PC3"), ]

  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 2, p.mat = p.mat)+
theme_void()+
 theme(
        axis.text = element_text(size = 8,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        axis.text.x = element_text(size = 8,
                                 angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right")+
    labs(title = "Correlations PCs with land-use for 2003")
  
  
  
 #correlations for individual years --> 2015
lm_model_data <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::filter(year_date == 2015) %>% 
  dplyr::select(!statistical_unit) %>% 
  #dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-1)) %>%
  dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>% 
  dplyr::select(PC1:PC3, 
                `agricultural land`:forest) 
cors <- cor(lm_model_data, method = "spearman") 
cors <- cors[c("PC1", "PC2", "PC3"), ]
cors <- cors[c("PC1", "PC2", "PC3"), ]
p.mat <- ggcorrplot::cor_pmat(lm_model_data)
p.mat <- p.mat[c("PC1", "PC2", "PC3"), ]

  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 2, p.mat = p.mat)+
theme_void()+
 theme(
        axis.text = element_text(size = 8,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        axis.text.x = element_text(size = 8,
                                 angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right") +
    labs(title = "Correlations PCs with land-use for 2015")
  
  
  #correlations for individual years --> 2019
lm_model_data <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::filter(year_date == 2019) %>% 
  dplyr::select(!statistical_unit) %>% 
  #dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-1)) %>%
  dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>% 
  dplyr::select(PC1:PC3, 
                `agricultural land`:forest) 
cors <- cor(lm_model_data, method = "spearman") 
cors <- cors[c("PC1", "PC2", "PC3"), ]
p.mat <- ggcorrplot::cor_pmat(lm_model_data)
p.mat <- p.mat[c("PC1", "PC2", "PC3"), ]

  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 2, p.mat = p.mat)+
theme_void()+
  theme(
        axis.text = element_text(size = 8,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        axis.text.x = element_text(size = 8,
                                 angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right")  +
    labs(title = "Correlations PCs with land-use for 2019")
  
  
  
  
   #correlations for individual years --> 2020
lm_model_data <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::filter(year_date == 2020) %>% 
  dplyr::select(!statistical_unit) %>% 
  #dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-1)) %>%
  dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>% 
  dplyr::select(PC1:PC3, 
                `agricultural land`:forest) 
cors <- cor(lm_model_data, method = "spearman") 
p.mat <- ggcorrplot::cor_pmat(lm_model_data)
p.mat <- p.mat[c("PC1", "PC2", "PC3"), ]

cors <- cors[c("PC1", "PC2", "PC3"), ]


  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 2,
                         p.mat = p.mat)+
theme_void()+
  theme(
        axis.text = element_text(size = 8,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        axis.text.x = element_text(size = 8,
                                 angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right")  +
    labs(title = "Correlations PCs with land-use for 2020")
  
  
  
   
lm_model_data <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  #dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-1)) %>%
  dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>% 
  dplyr::select(PC1:PC3, 
                `agricultural land`:forest) 
cors <- cor(lm_model_data, method = "spearman") 
p.mat <- ggcorrplot::cor_pmat(lm_model_data)
p.mat <- p.mat[c("PC1", "PC2", "PC3"), ]

cors <- cors[c("PC1", "PC2", "PC3"), ]


  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 2,
                         p.mat = p.mat)+
theme_void()+
  theme(
        axis.text = element_text(size = 8,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        axis.text.x = element_text(size = 8,
                                 angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right")  +
    labs(title = "Correlations PCs with land-use")
  
  




```



```{r}



nut_conversions <<- data.frame(
  nut_text = c(
    "Brandenburg/Berlin", "Brandenburg", "Baden-Wuerttemberg",
    "Bayern","Hessen","Mecklenburg-Vorpommern",
    "Niedersachsen","Niedersachsen/Hamburg/Bremen",
    "Nordrhein-Westfalen","Rheinland-Pfalz","Schleswig-Holstein",
    "Saarland","Sachsen","Sachsen-Anhalt","Thueringen/Sachsen-Anhalt", "Thueringen",
    "Deutschland"),
  nuts_short = c(
    NA,"DE4","DE1","DE2","DE7","DE8","DE9",NA,"DEA","DEB",
    "DEF","DEC","DED","DEE",NA,"DEG",NA))
  

precip <- read.table("regional_averages_rr_year.txt",
           skip = 1,
           sep =";") %>% 
    dplyr::select(-V20)   


averages <-  precip %>% 
      janitor::row_to_names(row_number = 1) %>% 
    tidyr::pivot_longer(!c(Jahr), names_to = "region", values_to = "precip") %>% 
    dplyr::left_join(nut_conversions, by = c("region" = "nut_text")) %>% 
    mutate(precipitation_avg = as.numeric(precip)) %>% 
    mutate(Jahr = as.numeric(Jahr)) %>% 
    dplyr::rename(date_year = Jahr,
                  
                  nut = nuts_short) %>% 
    dplyr::select(nut, date_year, precipitation_avg) %>% 
    group_by(nut) %>% 
    summarise(total_precipitation = mean(precipitation_avg, na.rm = TRUE))
  
  
  
  
deficit_data <-  precip %>% 
      janitor::row_to_names(row_number = 1) %>% 
    tidyr::pivot_longer(!c(Jahr), names_to = "region", values_to = "precip") %>% 
    dplyr::left_join(nut_conversions, by = c("region" = "nut_text")) %>% 
    mutate(precipitation_avg = as.numeric(precip)) %>% 
    mutate(Jahr = as.numeric(Jahr)) %>% 
    dplyr::filter(Jahr %in% c(2003,2015,2018,2019,2020)) %>% 
    dplyr::rename(date_year = Jahr,
                  nut = nuts_short) %>% 
    dplyr::select(nut, date_year, precipitation_avg) %>% 
    drop_na(nut) %>% 
    dplyr::left_join(averages, by = c("nut" = "nut")) %>% 
    mutate(deficit =  total_precipitation - precipitation_avg) %>% 
    dplyr::select(nut, date_year, deficit)
    
  
  #for all years
precip_cor_raw <- data_plot %>% 
  dplyr::select(PC1:year_date) %>% 
  dplyr::select(!statistical_unit) %>% 
  dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-2)) %>% 
    dplyr::left_join(deficit_data, 
                  by = c("year_date" ="date_year", "nuts_id" = "nut")) %>% 
    dplyr::select(deficit, PC1, PC2, PC3) 
    cors <- cor(precip_cor_raw, method = "spearman", use = "complete.obs")
    
    p.mat <- ggcorrplot::cor_pmat(precip_cor_raw)
    
  cors %>% 
    #t(.) %>% 
  ggcorrplot::ggcorrplot(., lab = TRUE, lab_size = 4,
                         p.mat = p.mat)+
theme_void()+
  theme(
        axis.text = element_text(size = 10,
                                 #angle = 90,
                                 hjust=0.95,vjust=0.2),
        plot.title = element_text(hjust = 1),
        legend.position = "right")
  
  
  
   
   
  
   

```




### ISOMap


```{r}
load("~/GitHub/drought-impact-assessment-working-version/isomap_embedding_v1.RData")


dcor_data_a <- emb@org.data %>% 
  as_tibble()

dcor_data_b <- emb@data@data %>% 
  as_tibble()

vars <- colnames(dcor_data_a)
isos <- colnames(dcor_data_b)

var_comb <- expand.grid(var_name = vars,
                          iso_name = isos) %>% 
  mutate(dcor  = NA)


dcors <- purrr::map_dfr(seq(1,nrow(var_comb)), function(x){

  distance_cor <- energy::dcor(dcor_data_a[var_comb$var_name[x]],
             dcor_data_b[var_comb$iso_name[x]])
  
  var_comb[x,] %>% 
    as_tibble() %>% 
    mutate(dcor = distance_cor)

})


heatmap <- dcors %>% 
  ggplot(aes(y = var_name, x = iso_name))+
  geom_tile(aes(fill = dcor))+
  coord_equal()+
  scale_fill_distiller(palette = "YlOrRd", direction = 1, limits = c(0,1))+
  theme_minimal()+
  labs(fill = "Distance \n correlation", y = "Impact variables", x = "ISOmap")+
  theme(panel.grid = element_blank(),
        legend.position = "none")+
  geom_text(aes(label = round(dcor,2)), size = 2)
  



iso_1_cors <- cbind(emb@org.data, 
      emb@data@data) %>% 
  as_tibble() %>% 
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS),
                      names_to = "iso", values_to = "measure") %>% 
  dplyr::filter(iso == "iso 1") %>% 
  dplyr::filter(impact %in% c("agriculture", "livestock", "social")) %>% 
  ggplot(aes(y = MIS, x = measure, color = impact))+
  geom_point(size = .5)+
  ggsci::scale_color_npg()+
  facet_wrap(~impact, scales = "free")+
  theme_minimal()+
  theme(legend.position = "none")+
  #geom_smooth(method = "lm")+
  labs(x ="ISO 1")



iso_2_cors <- cbind(emb@org.data, 
      emb@data@data) %>% 
  as_tibble() %>% 
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS),
                      names_to = "iso", values_to = "measure") %>% 
  dplyr::filter(iso == "iso 2") %>% 
  dplyr::filter(impact %in% c("fire", "aquaculture", "forestry")) %>% 
  ggplot(aes(y = MIS, x = measure, color = impact))+
  geom_point(size = .5)+
  ggsci::scale_color_npg()+
  facet_wrap(~impact, scales = "free")+
  theme_minimal()+
  theme(legend.position = "none")+
  #geom_smooth(method = "lm")+
  labs(x ="ISO 2")



iso_3_cors <- cbind(emb@org.data, 
      emb@data@data) %>% 
  as_tibble() %>% 
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS),
                      names_to = "iso", values_to = "measure") %>% 
  dplyr::filter(iso == "iso 3") %>% 
  dplyr::filter(impact %in% c("fire", "aquaculture")) %>% 
  ggplot(aes(y = MIS, x = measure, color = impact))+
  geom_point(size = .5)+
  ggsci::scale_color_npg()+
  facet_wrap(~impact, scales = "free")+
  theme_minimal()+
  theme(legend.position = "none")+
  #geom_smooth(method = "lm")+
  labs(x ="ISO 3")


heatmap + (iso_1_cors / iso_2_cors / iso_3_cors)



```



```{r}





  


cbind(emb@org.data, 
      emb@data@data) %>% 
  as_tibble() %>% 
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS),
                      names_to = "iso", values_to = "measure") %>% 
  ggplot(aes(x = measure, y = MIS))+
  geom_point(alpha = .2, size = .2)+
  geom_smooth(color = "red", size = .5)+
  facet_grid(cols = vars(impact), rows = vars(iso)  ,scales = "free")+
      ggpubr::stat_cor(aes(label = ..rr.label..), color = "red", geom = "text",
                       size = 2)+
    theme_minimal()+

  theme(axis.text = element_blank(),
        axis.ticks = element_blank())+
  labs(y = "MIS", x = "ISO")


  
  
  
```

The formation of the new axes highlights their varying dependence on the original drought impact variables. The first axis (iso 1) correlated strongly with agriculture, livestock and social impacts. Here, agricultural and livestock variables are opposed to the influence of social impacts. Namely, observations with strong agricultural or livestock impact occurences show fewer social impacts and vice versa. For the second axis (iso 2), aquaculture and social impacts show an opposing relationship to forestry impacts similiar to the first axes. The third axis (iso 3) highlights the opposing relationship of aquaculture and fire impacts. While these two variables highlighted correlated patterns on the second axis, the third axis highlights an opposing relationship.
Interestingly, impacts on waterways is the only variable which does not show a correlating pattern to at least one axis. This could be explained by the necessity of waterways relevant to shipping that are distributed in a way interdepentent of the remaining impacts. 




```{r}

cbind(emb@org.data, 
      emb@data@data) %>% 
  cbind(data_plot %>% dplyr::select(nuts_id, year_date)) %>%  
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`, nuts_id, year_date), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS, nuts_id, year_date),
                      names_to = "iso", values_to = "measure") %>% 
  dplyr::left_join(nuts_geo_data, by = c("nuts_id" = "NUTS_ID")) %>% 
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(aes(fill = measure), color = NA)+
     ggsci::scale_fill_gsea(reverse = TRUE)+

  facet_grid(rows = vars(iso), cols = vars(year_date))+
  theme_void()+
  labs(fill = "Iso")+
  theme(legend.position = "bottom",
        strip.text.y = element_text(hjust = 20))+
  
   geom_sf(fill = "transparent", color = "gray20", size = .35, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())

```


```{r}

macro_regions <- tibble(nuts_id = c("DE7", "DE1", "DE2",
                                    "DEE", "DEG", "DED", "DE4", "DE8",
                                    "DEB", "DEA", "DE9", "DEF"),
                        macro_region = c("south-west", "south-west", "south-west",
                                         "east", "east", "east", "east", "east",
                                         "northwest", "northwest", "northwest",
                                         "northwest"))

# Visualize: Specify the comparisons you want
my_comparisons <- list( c("east", "northwest"), c("east", "south-west"))



ggboxplot(ToothGrowth, x = "dose", y = "len",
          color = "dose", palette = "jco")+ 
  stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
  stat_compare_means(label.y = 50)     # Add global p-value



cbind(emb@org.data, 
      emb@data@data) %>% 
  cbind(data_plot %>% dplyr::select(nuts_id, year_date)) %>%  
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`, nuts_id, year_date), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS, nuts_id, year_date),
                      names_to = "iso", values_to = "measure") %>% 
  dplyr::mutate(nuts_id = substring(nuts_id,1, nchar(nuts_id)-2)) %>%
  dplyr::left_join(macro_regions, by = c("nuts_id" ="nuts_id")) %>% 
  drop_na(macro_region) %>% 
  ggplot(aes(x = macro_region, y = measure))+
  geom_boxplot()+
  facet_grid(iso ~ year_date,
             scales = "free")+
  theme(axis.text.x = element_text(angle = 90))+
  stat_compare_means()

```





The perspective on spatio-temporal patterns revealed several interesting trends highlighting temporal shifts or spatial clusters that reflect the interactions of several impacts. We find these patterns reflected in both the SOM and ISOmap results. 


```{r}
comparing_isos <- cbind(emb@org.data, 
      emb@data@data) %>% 
  cbind(data_plot %>% dplyr::select(nuts_id, year_date)) %>%  
  tidyr::pivot_longer(!c(`iso 1`, `iso 2`, `iso 3`, nuts_id, year_date), 
                      values_to = "MIS", 
                      names_to = "impact") %>% 
  tidyr::pivot_longer(!c(impact, MIS, nuts_id, year_date),
                      names_to = "iso", values_to = "measure") %>% 
  mutate(before_2019 = ifelse(year_date %in% c(2003,2015,2018), "Before", "After"))


comparing_isos %>% 
  group_by(before_2019, iso) %>% 
  summarise(mean_iso = mean(measure, na.rm = TRUE))

#t-test each iso
iso_1_before <- comparing_isos %>% dplyr::filter(before_2019 == "Before") %>% dplyr::filter(iso == "iso 1") %>% dplyr::select(measure) %>% dplyr::rename(before_iso1  = measure) %>%  drop_na()
iso_1_after <- comparing_isos %>% dplyr::filter(before_2019 == "After") %>% dplyr::filter(iso == "iso 1") %>% dplyr::select(measure) %>% dplyr::rename(after_iso1  = measure) %>% drop_na()
t.test(iso_1_after$after_iso1, iso_1_before$before_iso1) 

```


A first major trend concerns the shifts introduced following the 2018 drought hazard where two consecutive years of severe drought conditions followed. While prior drought events (2003, 2015) occurred temporally isolated, the sequence from 2018 until 2020 represents three consecutive years. Along the second and third year of this period, we identified significant shifts in both the ISOmap and SOM results. The shift can be summarized as...incporating multiple parallel processes. For the ISOmap embedding, we found significant differences comparing the years years 2003, 2015, 2018 to 2019, 2020. These differences imply multiple shifts. First, we observe a shift from agriculture-dominated areas towards an increased relevance of social impacts. We find this shift to relate to entire Germany as the difference in the mean $iso_1$ values is significant from -.6 to .4. For $iso_2$ we find a significant shift towards increased relevance of forestry impacts afer 2018. Here, literature highlights a lagging effect of the 2018 drought. __While the 2018 drought in isolation was extreme, a second drought in 2019 compounded its impacts, thus retarding vegetation recovery (Boergens et al., 2020; Popkin, 2021; Schuldt et al., 2020).__ This trend is clearly visible in the shift of $iso_2$ across entire Germany with particular focal points in areas with high forest coverage. In 2019, this shift occured already heavily in south-western Germany and regions in eastern Germany with strong forest cover (e.g. Hartz mountain region). In 2020 then, entire eastern Germany showed the shift on $iso_2$ towards the forestry impacts. In earlier years, $iso_2$ here highlighted a stronger prevalence of fire impacts in the eastern German area compared to longer-lasting forestry impacts. The two outlined two outlined trends of shifts towards more forestry, and social impacts after the 2018 drought find common intersections in the literature. For instance, Hanenwinkel et al.(2020) highlight the relevance of social impacts on forests coping with drought hazards. Leisure activities and tourism activities are significantly limited with damaged forests. For instancce, this can be seen in the Harz area. 


```{r}
#compute some metrics for the 2nd storyline
#from the SOM evaluation --> check how many super-classes stay the same
kept_shares <- edgeslist_dat %>% 
  dplyr::filter(superclass_from == superclass_to) %>%
  group_by(year) %>% 
  summarise(share_identical = sum(weight, na.rm = TRUE))
total_ties <- edgeslist_dat %>% 
  group_by(year) %>% 
  summarise(total_ties = sum(weight, na.rm = TRUE))

dplyr::bind_cols(kept_shares, total_ties) %>% 
  mutate(relative_share_kept = share_identical/total_ties) %>% 
  mutate(relative_share_kept = round(relative_share_kept,3 ))
  


```

A second major patterns concerns regional differences and their stability across the drougt hazards. Following the outlined shift described in the last paragraph, we regions showed somewhat stable trends within their respective drought impact profiles. For the SOM results for instance, we found that only 25 percent of super-classes from one drought event are identical in the next event on average. The maximum share that remained identical was identified between 2019 and 2020 likely relating to the trends outlined in the paragraph before. However, some areas could be identified which remained somewhat more stable over time. Again, the shift from one super-class to another does not necessarily imply that a particular impact is not relevant anymore but instead that a different combination of impacts has become prevalent. 






__Hanewinkel, Marc, Andrey Lessa Derci Augustynczik, and Rasoul Yousefpour. "Climate-smart forestry case study: Germany." Forest Bioeconomy and Climate Change. Springer, Cham, 2022. 197-209.__






### Self-organizing maps





```{r}
load("../som_trained_final_v1.Rdata")
train.data <- full.data %>% 
  ungroup() %>% 
  dplyr::select(agriculture:livestock)
train.data <- scale(train.data)

```



```{r}
#maybe add explanatory variables to the map, too?
aweSOMplot(som = iris.som, type = "Barplot", data = train.data, 
           variables = c("agriculture", "forestry",
                         "social", "waterways", "aquaculture", "fire", "livestock"),
           palvar =  "Pastel1",
           palsc = "Greys",
         
           size = 400,
           scales = "contrast")
```


```{r}
#maybe add explanatory variables to the map, too?
aweSOMplot(som = iris.som, type = "Radar", data = train.data, 
           variables = c("agriculture", "forestry",
                         "social", "waterways", "aquaculture", "fire", "livestock"),
           superclass = superclasses_hclust, 
           size = 400,
           scales = "same")
```


```{r}


superclasses_mapped <- expand.grid(nuts_id = unique(full.data$nuts_id),
            year_date = unique(full.data$year_date)) %>% 
  dplyr::full_join(full.data %>% 
  dplyr::filter(year_date < 2021),
  by = c("year_date"= "year_date", "nuts_id" = "nuts_id")) %>% 
  dplyr::left_join(nuts_geo_data, by = c("nuts_id"= "NUTS_ID")) %>%
  sf::st_as_sf() %>% 
  ggplot()+
  geom_sf(aes(fill = as.factor(superclass_som)), lwd = 0, color = NA)+
  facet_wrap(~year_date, nrow = 1)+
  theme_minimal()+
  theme_void()+
     geom_sf(fill = "transparent", color = "gray20", size = .2, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())+
    guides(fill=guide_legend(title="Cluster"))+

scale_fill_brewer(palette = "Pastel1")+
  theme(legend.position = "top")


edgeslist_dat <- full.data %>% 
  dplyr::select(nuts_id, year_date, superclass_som) %>% 
  group_by(nuts_id) %>% 
  mutate(prior_som_class = lag(superclass_som)) %>% 
  ungroup() %>% 
  dplyr::select(year_date, superclass_som, prior_som_class) %>% 
  dplyr::rename(year = year_date,
                from = prior_som_class,
                to = superclass_som) %>% 
  group_by(from, to, year) %>% 
  count() %>% 
  dplyr::rename(weight = n) %>% 
  drop_na() %>% 
  ungroup() %>% 
  mutate(superclass_from = from,
         superclass_to = to)


transitions_plot <- ggplot(edgeslist_dat %>% drop_na(),
       aes(axis1 = superclass_from,
           axis2 = superclass_to,
           y = weight)) +
  geom_alluvium(color = "grey50", aes(fill = weight)) +
  geom_stratum(fill = "white")+
      #geom_text(stat = "stratum", aes(label = after_stat(stratum)))+
   # ggfittext::geom_fit_text(stat = "stratum", width = 1/4, min.size = 3,
  #                           aes(label = after_stat(stratum))) +
  facet_wrap(~year, scales = "free", nrow = 1)+
 
    theme_minimal()+
  scale_x_discrete(limits = c("Prior year", "Selected year"),
                   expand = c(.1, .1))+
  labs(y = "N")+
      scale_fill_distiller(palette = "YlOrRd", direction = 1)+
  theme(panel.grid = element_blank(),
        legend.position = "none",
        axis.text.x = element_text(size = 4))



superclasses_mapped / transitions_plot

#manually then insert the colors in the bars on the bottom

```







# Impact profiles viz
```{r}
library(gtExtras)


impact_profile_specific <- iris.som$codes[[1]] %>% 
  as_tibble() %>% 
  dplyr::bind_cols(as_tibble(superclasses_hclust)) %>% 
  dplyr::rename(superclass_som = value) %>% 
  rowid_to_column(var = "cell_id") %>% 
  tidyr::pivot_longer(!c(cell_id, superclass_som),
                      names_to = "impact", values_to = "strength") %>% 
  group_by(superclass_som, impact) %>% 
  summarise(mean_value = mean(strength, na.rm = TRUE),
            sd_value = sd(strength, na.rm = TRUE)) %>% 
  mutate(mean_value = scales::rescale(mean_value))




create_plot <- function(index, impact_profile_specific){
ggplot(impact_profile_specific %>% dplyr::filter(superclass_som == index)) +
  geom_col(
    aes(
      x = impact,
      y = mean_value,
      fill = impact
    ),
    position = "dodge2",
    show.legend = TRUE,
    alpha = .9
  )+ 
  coord_polar()+
    scale_fill_brewer(palette = "Pastel1")+
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        panel.background  = element_blank())+
  theme(panel.grid.major = element_line(color = "black"))
}


list_of_plots <- list(create_plot(1, impact_profile_specific),
                      create_plot(2, impact_profile_specific),
                      create_plot(3, impact_profile_specific),
                      create_plot(4, impact_profile_specific),
                      create_plot(5, impact_profile_specific),
                      create_plot(6, impact_profile_specific))



#descriptions of impact
descriptions <- tibble(description = c("lorem impsum dolor et al bla bla",
                          "lorem impsum dolor et al bla bla",
                          "lorem impsum dolor et al bla bla",
                          "lorem impsum dolor et al bla bla",
                          "lorem impsum dolor et al bla bla",
                          "lorem impsum dolor et al bla bla"
                        ),
          superclass_som  = c(1,2,3,4,5,6))


number_features <- full.data %>% 
  dplyr::group_by(superclass_som) %>% 
  count() %>% 
  ungroup()


number_features %>% 
  mutate(ggplot = NA) %>%
  dplyr::rename(ID = superclass_som,
         number_observations = n) %>% 
  dplyr::left_join(descriptions, by = c("ID" = "superclass_som")) %>% 
  gt() %>% 
  text_transform(
    locations = cells_body(vars(ggplot)),
    fn = function(x) {
      map(list_of_plots, ggplot_image, height = px(60))
    }
  )


```















## Discussion

For the dimensionality reduction, a wide array of techniques existed with varying challenges and strengths which need to be discussed thoroughly for this research, too. For the SOM, one challenge revolves around the non-deterministic behavior in finding resulting topographic embedding. Therefore, we added multiple simulation runs comparing the results to assess the stability.

The SOM create signatures of impacts. A problematic scenario of the SOM could arise within the following hypothethical scenario: if one impact type is completely independent from the others (e.g. industrial from forestry), an observation that has no industry, hence, no impact in this domain. So both points are affected by the same drought and have in principle the same impacts in forestry. SOM puts them far apart. Instead, with ISOmap or PCA, the two points would share the position in one dimension and be separated in the second.

So you could cluster by dim 1, dim 2, or both... So here the question is a bit what you want. Do you want to factor in the infrastructure and prevalence of land-cover types, or not?

## Appendix

### Hazard data

```{r, fig.cap='Precipitation data on NUTS-1 level'}
appendix_precip_figure
```

```{r, warning=FALSE, message=FALSE, fig.cap='Selection of years with drought'}

histogram <- german_wide %>% 
  ggplot(aes(precip))+
  geom_histogram()+
  geom_vline(xintercept = median(german_wide$precip, na.rm = TRUE),
             color = "red", linetype = "dashed")+
  geom_text_repel(data = labels, aes(x = precip, label = date_year,
                                y = 10),
                  box.padding = 0.5, max.overlaps = Inf,
                      nudge_x = .15,
    nudge_y = 1,
    segment.curvature = -0.1,
    segment.ncp = 3,
    segment.angle = 20,
    segment.linetype = 6,
    segment.curvature = -1e-20,
    arrow = arrow(length = unit(0.015, "npc")))+
  geom_point(data = labels, aes(x = precip,
                                y = 10),
             color = "grey50")+
  theme_minimal()+
  labs(y = "Number of years", x = "Precipitation",
       subtitle = "Historic precipitation in Germany")


library(ggpubr)


scatter <- impacts_dataset %>% 
  group_by(year_date) %>% 
  summarise(impacts_total = sum(MIS, na.rm = TRUE)) %>% 
  dplyr::left_join(german_wide, by = c("year_date" = "date_year")) %>% 
  ggplot(aes(x = impacts_total, y = precip))+
  geom_point()+
  geom_smooth(method="lm")+
  stat_regline_equation(label.y = 350, aes(label = ..rr.label..))


library(patchwork)
histogram / scatter


```

### Data transformation

```{r, fig.cap='Impact distribution post and pre transformation', fig.width=10, fig.height=4}


p1 <- expand.grid(nuts_id = nuts3$NUTS_ID,
            year_date = seq(2000,2020,1)) %>% 
  dplyr::left_join(total_annual_impact_data %>% 
  ungroup() %>% 
  dplyr::filter(statistical_unit == "nuts3") %>% 
  mutate(across(agriculture:livestock, 
                ~ scales::rescale(as.numeric(.x)))) %>%
  tidyr::pivot_longer(!c(nuts_id, statistical_unit, year_date),
                      names_to = "impact_class",
                      values_to = "MIS"),
  by = c("nuts_id" = "nuts_id", "year_date" = "year_date")) %>% 
    mutate(MIS = ifelse(is.na(MIS),0,MIS)) %>% 
    dplyr::filter(MIS > 0) %>% 
  dplyr::filter(year_date %in% c(2003, 2015,2018,2019, 2020)) %>% 
  mutate(year_date = as.factor(year_date)) %>% 
  drop_na(impact_class) %>% 
  ggplot(aes(x = MIS))+
  geom_histogram()+
  scale_x_continuous(breaks = c(0,.5,1), labels = c(0,.5,1))+

  #geom_density()+
  facet_wrap(~impact_class, scales = "free")+
   theme_bw()+
  theme(axis.text = element_text(size = 16),
        strip.text = element_text(size = 20),
        axis.title = element_text(size = 18))+
  labs(x = "DIS", y = "Number of observations")

#nuts3 
p4 <- expand.grid(nuts_id = nuts3$NUTS_ID,
            year_date = seq(2000,2020,1)) %>% 
  dplyr::left_join(total_annual_impact_data %>% 
  ungroup() %>% 
  dplyr::filter(statistical_unit == "nuts3") %>% 
  mutate(across(agriculture:livestock, 
                ~ as.numeric(.x))) %>% 
  tidyr::pivot_longer(!c(nuts_id, statistical_unit, year_date),
                      names_to = "impact_class",
                      values_to = "MIS") %>% 
  group_by(nuts_id, year_date) %>% 
  summarise(MIS = sum(MIS, na.rm = TRUE)) %>% 
  dplyr::mutate(MIS = scales::rescale(MIS)),
  by = c("nuts_id" = "nuts_id", "year_date" = "year_date")) %>% 
  mutate(MIS = ifelse(is.na(MIS),0,MIS)) %>% 
  dplyr::filter(MIS > 0) %>% 
  dplyr::filter(year_date %in% c(2003, 2015,2018,2019, 2020)) %>% 
  ggplot(aes(x = MIS))+
  geom_histogram()+
  scale_x_continuous(breaks = c(0,.5,1), labels = c(0,.5,1))+
  facet_wrap(~year_date)+
   theme_bw()+
  theme(axis.text = element_text(size = 16),
        strip.text = element_text(size = 20),
        axis.title = element_text(size = 18))+
  labs(x = "DIS [re-scaled]", y = "Number of observations")



(p1 + p4)





p1 <- expand.grid(nuts_id = nuts3$NUTS_ID,
            year_date = c(2003,2015,2018, 2019, 2020)) %>% 
  dplyr::left_join(total_annual_impact_data_transformed %>% 
  ungroup() %>% 
  dplyr::filter(statistical_unit == "nuts3") %>% 
  mutate(across(agriculture:livestock, 
                ~ as.numeric(.x))) %>% 
  tidyr::pivot_longer(!c(nuts_id, statistical_unit, year_date),
                      names_to = "impact_class",
                      values_to = "MIS"),
  by = c("nuts_id" = "nuts_id", "year_date" = "year_date")) %>% 
    mutate(MIS = ifelse(is.na(MIS),0,MIS)) %>% 
    dplyr::filter(MIS > 0) %>% 
  mutate(year_date = as.factor(year_date)) %>% 
  drop_na(impact_class) %>% 
  ggplot(aes(x = MIS))+
  geom_histogram()+
  scale_x_continuous(breaks = c(0,.5,1), labels = c(0,.5,1))+
  #geom_density()+
  facet_wrap(~impact_class, scales = "free")+
   theme_bw()+
   theme(axis.text = element_text(size = 16),
        strip.text = element_text(size = 20),
        axis.title = element_text(size = 18))+
  labs(x = "DIS", y = "Number of observations")

#nuts3 
p4 <- expand.grid(nuts_id = nuts3$NUTS_ID,
            year_date = c(2003,2015,2018, 2019, 2020)) %>% 
  dplyr::left_join(total_annual_impact_data_transformed %>% 
  ungroup() %>% 
  dplyr::filter(statistical_unit == "nuts3") %>% 
  mutate(across(agriculture:livestock, 
                ~ as.numeric(.x))) %>% 
  tidyr::pivot_longer(!c(nuts_id, statistical_unit, year_date),
                      names_to = "impact_class",
                      values_to = "MIS") %>% 
  #mutate(year_date = as.factor(year_date)) %>% 
  group_by(nuts_id, year_date) %>% 
  summarise(MIS = sum(MIS, na.rm = TRUE)),
  by = c("nuts_id" = "nuts_id", "year_date" = "year_date")) %>% 
  mutate(MIS = ifelse(is.na(MIS),0,MIS)) %>% 
  dplyr::filter(MIS > 0) %>% 
  mutate(MIS = scales::rescale(MIS)) %>% 
  ggplot(aes(x = MIS))+
  geom_histogram()+
    scale_x_continuous(breaks = c(0,.5,1), labels = c(0,.5,1))+

  facet_wrap(~year_date)+
   theme_bw()+
   theme(axis.text = element_text(size = 16),
        strip.text = element_text(size = 20),
        axis.title = element_text(size = 18))+
  labs(x = "DIS [re-scaled]", y = "Number of observations")


p1 + p4
```


### Comparison ISOMap and PCA






```{r}
embed_methods <- c("Isomap", "PCA")
## load test data set
data_set <- total_annual_impact_data_transformed %>% 
  ungroup() %>% 
    dplyr::select(agriculture:livestock)

data_set <- scale(data_set)


isomap_emb <- emb
pca_emb <-  embed(data_set, "PCA", ndim = 3)

## apply dimensionality reduction
data_emb <- list
data_emb[1] <- isomap_emb
data_emb[2] <- pca_emb
names(data_emb) <- embed_methods

plot_R_NX(data_emb)+
  theme(title = element_blank(),
        axis.title = element_text())

```






# Clustering 

Cluster PCA
```{r}
clusters <- hclust(dist( res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
    dplyr::select(PC1:PC3)))

plot(clusters)
clusterCut <- cutree(clusters, 4)


dim3_plot <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
    dplyr::select(PC1:PC3) %>% 
  dplyr:::bind_cols(clusterCut) %>% 
  dplyr::rename(cluster = ...4) %>% 
  mutate(cluster = as.factor(cluster)) 

colors <- c("#999999", "#E69F00", "#56B4E9", "#00FF00")
colors <- colors[as.numeric(dim3_plot$cluster)]
scatterplot3d(dim3_plot[,1:3], pch = 16, color=colors)



 
 
 
 
summary_clusters <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  dplyr:::bind_cols(clusterCut) %>% 
  dplyr::rename(cluster = ...18) %>% 
  mutate(cluster = as.factor(cluster)) %>% 
   group_by(cluster) %>% 
   summarise(agriculture_mean = mean(agriculture, na.rm = TRUE),
             livestock_mean = mean(livestock, na.rm = TRUE),
             forestry_mean = mean(forestry, na.rm = TRUE),
             social_mean = mean(social, na.rm = TRUE),
             aquaculture_mean = mean(aquaculture, na.rm = TRUE),
             waterways_mean = mean(waterways, na.rm = TRUE),
             fire_mean = mean(fire, na.rm = TRUE)) %>% 
  tidyr::pivot_longer(!cluster, names_to = "category", values_to = "mean_") %>% 
  ggplot(aes(y = category, x = mean_, fill = cluster))+
  geom_bar(position="dodge", stat="identity")+
  ggsci::scale_fill_npg()+
  theme_minimal()+
  labs(x = "Mean", y = "", fill = "")+
  theme(legend.position = "none")
  


mtcars_radar <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  dplyr:::bind_cols(clusterCut) %>% 
  dplyr::rename(cluster = ...18) %>% 
  mutate(cluster = as.factor(cluster)) %>% 
   group_by(cluster) %>% 
   summarise(agriculture = mean(agriculture, na.rm = TRUE),
             livestock = mean(livestock, na.rm = TRUE),
             forestry = mean(forestry, na.rm = TRUE),
             social = mean(social, na.rm = TRUE),
             aquaculture = mean(aquaculture, na.rm = TRUE),
             waterways = mean(waterways, na.rm = TRUE),
             fire = mean(fire, na.rm = TRUE)) %>% 
  dplyr::rename(group  = cluster) %>% 
  mutate_each(funs(rescale), -group) 

ggradar(mtcars_radar)+
  ggsci::scale_color_npg()


plot <-  res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  dplyr:::bind_cols(clusterCut) %>% 
  dplyr::rename(cluster = ...18) %>% 
  mutate(cluster = as.factor(cluster)) %>% 
   dplyr::left_join(nuts3, by = c("nuts_id" = "NUTS_ID")) %>% 
   sf::st_as_sf() %>% 
   ggplot(aes(fill = cluster))+
   geom_sf(color = NA)+
   facet_wrap(~year_date, nrow = 2)+
   theme_void()+
   ggsci::scale_fill_npg()+
   geom_sf(fill = "transparent", color = "gray20", size = .2, 
            data = nuts1 %>%   group_by(CNTR_CODE) %>% summarise())
 
 


my_comparisons <- list( c("1", "2"), c("1", "3"), c("1", "4"),
                        c("2", "4"), c("2","3"), c("3","4"))

res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>% 
  dplyr:::bind_cols(clusterCut) %>% 
  dplyr::rename(cluster = ...18) %>% 
  mutate(cluster = as.factor(cluster)) %>% 
   dplyr::left_join(land_use, by = c("nuts_id"  = "NUTS_ID")) %>%
  ggplot(aes(x = cluster, y = `agricultural land`))+
  geom_boxplot()+
  ggpubr::stat_compare_means(comparisons = my_comparisons)




```



```{r}
library(ClustGeo)






data_clust <- res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>%  
  dplyr::filter(year_date == 2018) %>% 
  dplyr::right_join(nuts3, by = c("nuts_id" = "NUTS_ID")) %>% 
  column_to_rownames(var = "nuts_id") %>% 
  dplyr::select(PC1:PC3) 



nuts3_cleaned <- nuts3 %>% 
  dplyr::semi_join(res.pca$x %>% 
  as_tibble() %>% 
  dplyr::bind_cols(total_annual_impact_data_transformed) %>% 
  as_tibble() %>%  
  dplyr::filter(year_date == 2018),
  
  by = c("NUTS_ID" = "nuts_id")) %>% 
  sf::st_as_sf()

map <- sf::as_Spatial(nuts3)


library(sp)
sp::plot(map, border="grey") # plot method




data_clust <- data_clust[map$NUTS_ID,]


identical(as.vector(map$NUTS_ID),rownames(data_clust))


data_clust[is.na(data_clust)] <- 0

D0 <- dist(data_clust) # the socio-economic distances
tree <- hclustgeo(D0)
plot(tree,hang = -1, label = FALSE, 
     xlab = "", sub = "",
     main = "Ward dendrogram with D0 only")

rect.hclust(tree ,k = 5, border = c(4,5,3,2,1))
legend("topright", legend = paste("cluster",1:5), 
       fill=1:5,bty= "n", border = "white")




P5 <- cutree(tree,5)
city_label <- as.vector(map$"NUTS_ID")
names(P5) <- city_label

plot(map, border = "grey", col = P5, 
         main = "Partition P5 obtained with D0 only")
legend("topleft", legend = paste("cluster",1:5), 
       fill = 1:5, bty = "n", border = "white")


D1 <- as.dist(nuts3 %>% 
  sf::st_centroid() %>% 
 sf::st_distance()) # the geographic distances between the municipalities


range.alpha <- seq(0,1,0.1)
K <- 5
cr <- choicealpha(D0, D1, range.alpha, 
  K, graph = FALSE)
cr$Q # proportion of explained inertia


plot(cr)


tree <- hclustgeo(D0,D1,alpha=0.2)
P5bis <- cutree(tree,5)

sp::plot(map, border = "grey", col = P5bis, 
         main = "Partition P5bis obtained with alpha=0.2 
         and geographical distances")
legend("topleft", legend=paste("cluster",1:5), 
       fill=1:5, bty="n",border="white")

```

